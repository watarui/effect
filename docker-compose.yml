services:
  # ========================================
  # データベース層（完全分離型）
  # ========================================

  # Event Store 専用 PostgreSQL
  postgres-event-store:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-event-store
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: event_store_db
    ports:
      - "${POSTGRES_EVENT_STORE_PORT:-5432}:5432"
    volumes:
      - postgres_event_store_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Learning Service 専用 PostgreSQL
  postgres-learning:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-learning
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: learning_db
    ports:
      - "${POSTGRES_LEARNING_PORT:-5433}:5432"
    volumes:
      - postgres_learning_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Vocabulary Command Service 専用 PostgreSQL
  postgres-vocabulary-command:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-vocabulary-command
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: vocabulary_command_db
    ports:
      - "${POSTGRES_VOCABULARY_COMMAND_PORT:-5434}:5432"
    volumes:
      - postgres_vocabulary_command_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Vocabulary Query Service 専用 PostgreSQL
  postgres-vocabulary-query:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-vocabulary-query
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: vocabulary_query_db
    ports:
      - "${POSTGRES_VOCABULARY_QUERY_PORT:-5440}:5432"
    volumes:
      - postgres_vocabulary_query_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Vocabulary Projection Service 専用 PostgreSQL
  postgres-vocabulary-projection:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-vocabulary-projection
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: vocabulary_projection_db
    ports:
      - "${POSTGRES_VOCABULARY_PROJECTION_PORT:-5441}:5432"
    volumes:
      - postgres_vocabulary_projection_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # User Service 専用 PostgreSQL
  postgres-user:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-user
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: user_db
    ports:
      - "${POSTGRES_USER_PORT:-5435}:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Progress Service 専用 PostgreSQL
  postgres-progress:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-progress
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: progress_db
    ports:
      - "${POSTGRES_PROGRESS_PORT:-5436}:5432"
    volumes:
      - postgres_progress_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Algorithm Service 専用 PostgreSQL
  postgres-algorithm:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-algorithm
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: algorithm_db
    ports:
      - "${POSTGRES_ALGORITHM_PORT:-5437}:5432"
    volumes:
      - postgres_algorithm_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # AI Service 専用 PostgreSQL
  postgres-ai:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-ai
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: ai_db
    ports:
      - "${POSTGRES_AI_PORT:-5438}:5432"
    volumes:
      - postgres_ai_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Saga Orchestrator 専用 PostgreSQL
  postgres-saga:
    image: postgres:18beta2-alpine3.22
    container_name: effect-postgres-saga
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-effect}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-effect_password}
      POSTGRES_DB: saga_db
    ports:
      - "${POSTGRES_SAGA_PORT:-5439}:5432"
    volumes:
      - postgres_saga_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-effect}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # ========================================
  # 共通インフラストラクチャ
  # ========================================

  # Meilisearch - 検索エンジン
  meilisearch:
    image: getmeili/meilisearch:v1.12
    container_name: effect-meilisearch
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY:-masterKey}
      MEILI_ENV: ${MEILISEARCH_ENV:-development}
      MEILI_DB_PATH: /meili_data
    ports:
      - "${MEILISEARCH_PORT:-7700}:7700"
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Redis - キャッシュ専用
  redis:
    image: redis:8.2-rc1-alpine3.22
    container_name: effect-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # Google Pub/Sub エミュレータ - イベントバス
  pubsub:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    container_name: effect-pubsub
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085
    ports:
      - "${PUBSUB_EMULATOR_PORT:-8085}:8085"
    environment:
      PUBSUB_PROJECT_ID: ${PUBSUB_PROJECT_ID:-effect-local}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - effect-network

  # ========================================
  # マイクロサービス層
  # ========================================

  # Domain Events Service - イベントスキーマ管理
  domain-events-service:
    build:
      context: .
      dockerfile: services/domain_events_service/Dockerfile
    container_name: effect-domain-events-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      DOMAIN_EVENTS_GRPC_PORT: 50053
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
    ports:
      - "${DOMAIN_EVENTS_PORT:-50053}:50053"
    depends_on:
      postgres-event-store:
        condition: service_healthy
    networks:
      - effect-network

  # Event Store Service - イベント永続化 + Event Bus
  event-store-service:
    build:
      context: .
      dockerfile: services/event_store_service/Dockerfile
    container_name: effect-event-store-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50051
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      DOMAIN_EVENTS_URL: http://domain-events-service:50053
      ENABLE_EVENT_VALIDATION: "true"
      GCP_PROJECT_ID: ${PUBSUB_PROJECT_ID:-effect-local}
      PUBSUB_TOPIC_PREFIX: effect
      PUBSUB_ENABLE_ORDERING: "true"
      PUBSUB_EMULATOR_HOST: pubsub:8085
    ports:
      - "${EVENT_STORE_PORT:-50051}:50051"
    depends_on:
      postgres-event-store:
        condition: service_healthy
      domain-events-service:
        condition: service_started
      pubsub:
        condition: service_started
    networks:
      - effect-network

  # API Gateway - GraphQL エンドポイント
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
      target: development
    container_name: effect-api-gateway
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 8000
      # gRPC サービスエンドポイント
      LEARNING_SERVICE_URL: learning-service:50051
      VOCABULARY_COMMAND_SERVICE_URL: vocabulary-command-service:50052
      VOCABULARY_QUERY_SERVICE_URL: vocabulary-query-service:50053
      USER_SERVICE_URL: user-service:50054
      PROGRESS_SERVICE_URL: progress-service:50055
      ALGORITHM_SERVICE_URL: algorithm-service:50056
      AI_SERVICE_URL: ai-service:50057
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    volumes:
      - ./services/api-gateway:/app/services/api-gateway
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      - learning-service
      - vocabulary-command-service
      - vocabulary-query-service
      - user-service
      - progress-service
      - algorithm-service
      - ai-service
    networks:
      - effect-network

  # Learning Service - 学習セッション管理
  learning-service:
    build:
      context: .
      dockerfile: services/learning-service/Dockerfile
      target: development
    container_name: effect-learning-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50051
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-learning:5432/learning_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/learning-service:/app/services/learning-service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-learning:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # Vocabulary Command Service - 書き込み専用
  vocabulary-command-service:
    build:
      context: .
      dockerfile: services/vocabulary_command_service/Dockerfile
      target: development
    container_name: effect-vocabulary-command-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50052
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-vocabulary-command:5432/vocabulary_command_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/vocabulary_command_service:/app/services/vocabulary_command_service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-vocabulary-command:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # Vocabulary Query Service - 読み取り専用
  vocabulary-query-service:
    build:
      context: .
      dockerfile: services/vocabulary_query_service/Dockerfile
      target: development
    container_name: effect-vocabulary-query-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50053
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-vocabulary-query:5432/vocabulary_query_db
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: local
    volumes:
      - ./services/vocabulary_query_service:/app/services/vocabulary_query_service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-vocabulary-query:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - effect-network

  # Vocabulary Projection Service - イベント処理
  vocabulary-projection-service:
    build:
      context: .
      dockerfile: services/vocabulary_projection_service/Dockerfile
      target: development
    container_name: effect-vocabulary-projection-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-vocabulary-projection:5432/vocabulary_projection_db
      QUERY_DB_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-vocabulary-query:5432/vocabulary_query_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/vocabulary_projection_service:/app/services/vocabulary_projection_service
      - ./shared:/app/shared
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-vocabulary-projection:
        condition: service_healthy
      postgres-vocabulary-query:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # User Service - ユーザー管理
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
      target: development
    container_name: effect-user-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50054
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-user:5432/user_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/user-service:/app/services/user-service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-user:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # Progress Service - 進捗管理（CQRS読み取り側）
  progress-service:
    build:
      context: .
      dockerfile: services/progress-service/Dockerfile
      target: development
    container_name: effect-progress-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50055
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-progress:5432/progress_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/progress-service:/app/services/progress-service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-progress:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
      event-processor:
        condition: service_started
    networks:
      - effect-network

  # Algorithm Service - 学習アルゴリズム
  algorithm-service:
    build:
      context: .
      dockerfile: services/algorithm-service/Dockerfile
      target: development
    container_name: effect-algorithm-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50056
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-algorithm:5432/algorithm_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/algorithm-service:/app/services/algorithm-service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-algorithm:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # AI Service - AI 統合
  ai-service:
    build:
      context: .
      dockerfile: services/ai-service/Dockerfile
      target: development
    container_name: effect-ai-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50057
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-ai:5432/ai_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
      # Gemini API Key は .env ファイルで管理
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
    volumes:
      - ./services/ai-service:/app/services/ai-service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-ai:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # Event Processor - イベント処理
  event-processor:
    build:
      context: .
      dockerfile: services/event-processor/Dockerfile
      target: development
    container_name: effect-event-processor
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
    volumes:
      - ./services/event-processor:/app/services/event-processor
      - ./shared:/app/shared
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # Saga Orchestrator - 分散トランザクション管理
  saga-orchestrator:
    build:
      context: .
      dockerfile: services/saga-orchestrator/Dockerfile
      target: development
    container_name: effect-saga-orchestrator
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50058
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-saga:5432/saga_db
      EVENT_STORE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-event-store:5432/event_store_db
      REDIS_URL: redis://redis:6379
      PUBSUB_EMULATOR_HOST: pubsub:8085
      GOOGLE_CLOUD_PROJECT: ${PUBSUB_PROJECT_ID:-effect-local}
      ENVIRONMENT: local
      # gRPC サービスエンドポイント（補償トランザクション用）
      LEARNING_SERVICE_URL: learning-service:50051
      VOCABULARY_COMMAND_SERVICE_URL: vocabulary-command-service:50052
      VOCABULARY_QUERY_SERVICE_URL: vocabulary-query-service:50053
      USER_SERVICE_URL: user-service:50054
      PROGRESS_SERVICE_URL: progress-service:50055
      ALGORITHM_SERVICE_URL: algorithm-service:50056
      AI_SERVICE_URL: ai-service:50057
    volumes:
      - ./services/saga-orchestrator:/app/services/saga-orchestrator
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres-saga:
        condition: service_healthy
      postgres-event-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network

  # Vocabulary Search Service - 検索専門サービス
  vocabulary-search-service:
    build:
      context: .
      dockerfile: services/vocabulary_search_service/Dockerfile
      target: development
    container_name: effect-vocabulary-search-service
    environment:
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 50059
      MEILISEARCH_URL: http://meilisearch:7700
      MEILISEARCH_API_KEY: ${MEILISEARCH_MASTER_KEY:-masterKey}
      REDIS_URL: redis://redis:6379
      INDEX_NAME: vocabulary_items
      DATABASE_URL: postgresql://${POSTGRES_USER:-effect}:${POSTGRES_PASSWORD:-effect_password}@postgres-vocabulary-query:5432/vocabulary_query_db
    volumes:
      - ./services/vocabulary_search_service:/app/services/vocabulary_search_service
      - ./shared:/app/shared
      - ./protos:/app/protos
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      meilisearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres-vocabulary-query:
        condition: service_healthy
    networks:
      - effect-network

  # ========================================
  # 開発ツール（オプション）
  # ========================================

  # pgAdmin - PostgreSQL 管理ツール
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: effect-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@effect.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/pgadmin-servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres-event-store
      - postgres-learning
      - postgres-vocabulary-command
      - postgres-vocabulary-query
      - postgres-vocabulary-projection
      - postgres-user
      - postgres-progress
      - postgres-algorithm
      - postgres-ai
      - postgres-saga
    networks:
      - effect-network
    profiles:
      - tools

  # RedisInsight - Redis 管理ツール
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: effect-redis-insight
    ports:
      - "${REDIS_INSIGHT_PORT:-8001}:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      redis:
        condition: service_healthy
      pubsub:
        condition: service_healthy
    networks:
      - effect-network
    profiles:
      - tools

  # Prometheus - メトリクス収集
  prometheus:
    image: prom/prometheus:latest
    container_name: effect-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - effect-network
    profiles:
      - monitoring

  # Grafana - メトリクス可視化
  grafana:
    image: grafana/grafana:latest
    container_name: effect-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - effect-network
    profiles:
      - monitoring

  # Jaeger - 分散トレーシング
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: effect-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"
    networks:
      - effect-network
    profiles:
      - monitoring

networks:
  effect-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # PostgreSQL データボリューム（各サービスごと）
  postgres_event_store_data:
  postgres_learning_data:
  postgres_vocabulary_command_data:
  postgres_vocabulary_query_data:
  postgres_vocabulary_projection_data:
  postgres_user_data:
  postgres_progress_data:
  postgres_algorithm_data:
  postgres_ai_data:
  postgres_saga_data:

  # その他のボリューム
  redis_data:
  meilisearch_data:
  pgadmin_data:
  redis_insight_data:
  prometheus_data:
  grafana_data:
  cargo_cache:
  target_cache:
